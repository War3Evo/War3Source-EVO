// War3Source_Engine_WCX_Engine_Crit.sp

/* Plugin Template generated by Pawn Studio */
/*
#include <war3source>

#assert GGAMEMODE == MODE_WAR3SOURCE

public Plugin:myinfo =
{
	name = "WCX - Crit/Damage Engine",
	author = "necavi",
	description = "WCX Critical strike and extra damage engine",
	version = "0.1",
	url = "http://0xf.org"
}
*/
public void War3Source_Engine_WCX_Engine_Crit_OnWar3EventPostHurt(int victim, int attacker,float damage,char weapon[64],bool isWarcraft)
{
	if((victim == attacker) || (!ValidPlayer(victim) || !ValidPlayer(attacker)) || (GetClientTeam(victim) == GetClientTeam(attacker)))
	{
		return;
	}
	//decl String:weapon[64];
	//GetEventString(internal_W3GetVar(SmEvent),"weapon",weapon,sizeof(weapon));
	if(StrEqual(weapon, "crit",false) || StrEqual(weapon, "bash", false) || StrEqual(weapon, "weapon_crit",false) || StrEqual(weapon, "weapon_bash", false))
		return;

	float CritChance = GetBuffSumFloat(attacker, fCritChance);
	float CritMultiplier = GetBuffSumFloat(attacker,fCritModifier);
	int CritMode = GetBuffLastValue(attacker, iCritMode);
	int DamageMode = GetBuffLastValue(attacker, iDamageMode);
	float DamageMultiplier = GetBuffSumFloat(attacker, fDamageModifier);
	int BonusDamage = GetBuffSumInt(attacker,iDamageBonus);

	float PercentIncrease = 0.0;
	float CritPercentIncrease = 0.0;
	int DamageIncrease = 0;

	if((DamageMultiplier > 0.0) ||(BonusDamage > 0) || (DamageMode > 0))
	{
		switch(DamageMode)
		{
			//1 (all damage qualifies for damage increase)
			case(1):{
				PercentIncrease = FloatMul(DamageMultiplier,damage);
				DamageIncrease = BonusDamage;
			}
			//2 (bullet damage damage increase)
			case(2):{
				if(!W3IsDamageFromMelee(weapon) && !StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
			//3 (grenade damage damage increase)
			case(3):{
				if(StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
			//4 (melee damage damage increase)
			case(4):{
				if(W3IsDamageFromMelee(weapon))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
			//5 (melee and bullet damage increase)
			case(5):{
				if(!StrEqual(weapon,"hegrenade",false))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
			//6 (melee and grenade damage increase)
			case(6):{
				if(StrEqual(weapon,"hegrenade",false)||W3IsDamageFromMelee(weapon))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
			//7 (bullet and grenade damage increase)
			case(7):{
				if(StrEqual(weapon,"hegrenade",false)||!W3IsDamageFromMelee(weapon))
				{
					PercentIncrease = FloatMul(DamageMultiplier,damage);
					DamageIncrease = BonusDamage;
				}
			}
		}
	}
	if(CritChance > 0.0 || CritMode > 0)
	{
		//if(War3_Chance(CritChance) && War3_Chance(fChanceModifier(attacker)))
		if(War3_Chance(CritChance))
		{
			switch(CritMode)
			{
				//1 (all damage qualifies for damage increase)
				case(1):{
					CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//2 (bullet damage damage increase)
				case(2):{
					if(!W3IsDamageFromMelee(weapon) && !StrEqual(weapon,"hegrenade",false))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//3 (grenade damage damage increase)
				case(3):{
					if(StrEqual(weapon,"hegrenade",false))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//4 (melee damage damage increase)
				case(4):{
					if(W3IsDamageFromMelee(weapon))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//5 (melee and bullet damage increase)
				case(5):{
					if(!StrEqual(weapon,"hegrenade",false))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//6 (melee and grenade damage increase)
				case(6):{
					if(StrEqual(weapon,"hegrenade",false)||W3IsDamageFromMelee(weapon))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
				//7 (bullet and grenade damage increase)
				case(7):{
					if(StrEqual(weapon,"hegrenade",false)||!W3IsDamageFromMelee(weapon))
						CritPercentIncrease = FloatMul(CritMultiplier,damage);
				}
			}
		}
	}
	float newdamage = CritPercentIncrease;
	newdamage += PercentIncrease;
	newdamage += float(DamageIncrease);

	int damageASint = RoundToNearest(newdamage);

	if(damageASint > 0 && ValidPlayer(victim, true))
	{
		if(DealDamage(victim,damageASint,attacker,_,"weapon_crit"))
		{
			if(CritPercentIncrease>0)
			{
#if (GGAMETYPE == GGAME_TF2)
				if(ValidPlayer(attacker,true) && !IsOwnerSentry(attacker))
#else // css or csgo
				if(ValidPlayer(attacker,true))
#endif
				{
					War3_ChatMessage(attacker,"{blue}CRIT! {default}Multi {blue}%.2f {default}extra dmg: {blue}%d",CritMultiplier,RoundToFloor(CritPercentIncrease));
					if(ValidPlayer(victim))
					{
						char AttackerName[128];
						GetClientName(attacker,AttackerName,sizeof(AttackerName));
						War3_ChatMessage(victim,"%s {red}CRITS you for {default}Multi {red}%.2f {default}extra dmg: {red}%d",AttackerName,CritMultiplier,RoundToFloor(CritPercentIncrease));
					}
				}
			}
			//return newdamage;
		}
	}
	//return 0.0;
}

